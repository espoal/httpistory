const serviceUuid=11264,cmdCharUUID=11265,statusCharUUID=11267,getDevice=async()=>await navigator.bluetooth.requestDevice({filters:[{services:[11264]}]}),connect=async e=>{const t=await e.gatt.connect();return{gattServer:t,primaryService:await t.getPrimaryService(11264)}};document.getElementById("scanBtn").onclick=(async e=>{e.preventDefault(),window.myTier.device=await getDevice()}),document.getElementById("borrowBtn").onclick=(async e=>{e.preventDefault(),console.log("Borrow scooter...")}),document.getElementById("resetBtn").onclick=(async e=>{e.preventDefault(),window.location.reload()});const encoder=new TextEncoder("utf-8"),decoder=new TextDecoder("utf-8"),setupCmdChar=async({primaryService:e})=>{const t=await e.getCharacteristic(11265);return t.oncharacteristicvaluechanged=cmdCharNotificationHandler,await t.startNotifications(),t},setupStatusChar=async({primaryService:e})=>{const t=await e.getCharacteristic(11267);return t.oncharacteristicvaluechanged=statusReportNotificationHandler,t.startNotifications(),t},unlockCommand=e=>`AT+BKSCT=${e},0,0004$\r\n`,lockCommand=e=>`AT+BKSCT=${e},1,0004$\r\n`,ledONcommand=e=>`AT+BKLED=${e},0,1,0004$\r\n`,ledOFFcommand=e=>`AT+BKLED=${e},0,0,0004$\r\n`,readParamsCommand=e=>`AT+BKALC=${e},0004$\r\n`,sendCommand=async({command:e,char:t})=>{const a=await encoder.encode(e);await t.writeValue(a)},unlock=async({pass:e="ES200BT",char:t})=>{const a=unlockCommand(e);await sendCommand({command:a,char:t})},lock=async({pass:e="ES200BT",char:t})=>{const a=lockCommand(e);await sendCommand({command:a,char:t})},ledOn=async({pass:e="ES200BT",char:t})=>{const a=ledONcommand(e);await sendCommand({command:a,char:t})},ledOff=async({pass:e="ES200BT",char:t})=>{const a=ledOFFcommand(e);await sendCommand({command:a,char:t})},readParams=async({pass:e="ES200BT",char:t})=>{const a=readParamsCommand(e);await sendCommand({command:a,char:t})},commandReport={success:!1,lockStatus:"locked",ledStatus:"off"},cmdCharNotificationHandler=async e=>{const t=await decoder.decode(e.target.value);if(t.startsWith("+ACK:BKSCT=")){const e=t.split("+ACK:BKSCT=")[1].split(",");return console.log({resp:e}),commandReport.success=!!parseInt(e[0]),commandReport.lockStatus=parseInt(e[1])?"locked":"unlocked",void(document.getElementById("commandParagraph").innerHTML=commandReportParagraph(commandReport))}if(t.startsWith("+ACK:BKLED")){const e=t.split("+ACK:BKLED=")[1].split(",");return console.log({resp:e}),commandReport.success=!!parseInt(e[0]),commandReport.ledStatus=parseInt(e[1])?"off":"on",console.log({commandReport:commandReport}),void(document.getElementById("commandParagraph").innerHTML=commandReportParagraph(commandReport))}if(t.startsWith("+ACK:BKALC")){t.split("+ACK:BKALC=")[1].split(",");return commandReport.success=!0,void(document.getElementById("commandParagraph").innerHTML=commandReportParagraph(commandReport))}console.log({value:t})},commandReportParagraph=({success:e,lockStatus:t,ledStatus:a})=>`\n  <b>Command Report:</b> <br>\n  Command Successful: ${e}<br>\n  Lock Status: ${t}<br>\n  Led Status: ${a}<br>\n  \n  `;let statusCounter=0;const statusInterval=4,statusReportNotificationHandler=async e=>{const t=await decoder.decode(e.target.value);if(!t.startsWith("+RESP:BKINF=ECU,"))return;if(4!==statusCounter)return void statusCounter++;statusCounter=0;const a=t.split("+RESP:BKINF=ECU,")[1].split(","),n=parseInt(a[12])/10,r=100*(parseInt(a[22])-200)/850,c=100*(parseInt(a[23])-200)/850,o=100*(parseInt(a[24])-200)/850,s={lockStatus:a[0]?"unlocked":"locked",speed:a[1],currentDistance:a[2],range:a[3],odometer:a[4],ridingTime:a[5],batteryLevel:n,acceleration:r,leftBrake:c,rightBrake:o};document.getElementById("statusParagraph").innerHTML=statusParagraph(s)},statusParagraph=({speed:e,currentDistance:t,range:a,odometer:n,ridingTime:r,batteryLevel:c,acceleration:o,leftBrake:s,rightBrake:d})=>`\n  <b>Status Report:</b> <br>\n  Speed: ${e} km/h<br>\n  Current Distance: ${t} meters<br>\n  Range Left: ${a}<br>\n  Odometer: ${n}<br>\n  Riding Time: ${r}<br>\n  Battery Level: ${c}<br>\n  Acceleration: ${o} %<br>\n  Left Brake: ${s} %<br>\n  Right Brake: ${d} %<br>\n  \n  `;document.getElementById("connectBtn").onclick=(async e=>{e.preventDefault();const{gattServer:t,primaryService:a}=await connect(window.myTier.device),n=await setupCmdChar({primaryService:a}),r=await setupStatusChar({primaryService:a});document.getElementById("scooterName").textContent=window.myTier.device.name,window.myTier.gattServer=t,window.myTier.primaryService=a,window.myTier.cmdChar=n,window.myTier.statusChar=r}),document.getElementById("passwordBtn").onclick=(async e=>{e.preventDefault(),window.myTier.password=document.getElementById("password").value;const t=window.myTier.password,a=window.myTier.cmdChar;await unlock({pass:t,char:a})}),document.getElementById("unlockBtn").onclick=(async e=>{e.preventDefault();const t=window.myTier.cmdChar,a=window.myTier.password;await unlock({pass:a,char:t})}),document.getElementById("lockBtn").onclick=(async e=>{e.preventDefault();const t=window.myTier.cmdChar,a=window.myTier.password;await lock({pass:a,char:t})}),document.getElementById("ledOn").onclick=(async e=>{e.preventDefault();const t=window.myTier.cmdChar,a=window.myTier.password;await ledOn({pass:a,char:t})}),document.getElementById("ledOff").onclick=(async e=>{e.preventDefault();const t=window.myTier.cmdChar,a=window.myTier.password;await ledOff({pass:a,char:t})}),document.getElementById("paramBtn").onclick=(async e=>{e.preventDefault();const t=window.myTier.cmdChar,a=window.myTier.password;await readParams({pass:a,char:t})}),document.getElementById("lendBtn").onclick=(async e=>{e.preventDefault(),console.log("lending scooter...")}),document.getElementById("disconnectBtn").onclick=(async e=>{e.preventDefault()}),window.myTier={bleDevice:null,gattServer:null,primaryService:null,cmdChar:null,statusChar:null,password:""};